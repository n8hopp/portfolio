
@import url(https://cdn.jsdelivr.net/npm/firacode@6.2.0/distr/fira_code.css);
// How many menu items do we have?
$menu-items: 3;

// Colours
$background-color: #707070;
$indicator-color: #0046A5;

// Transition Speed
$transition-speed: 0.5s;

// Dynamic Variables
$width: (100/$menu-items) * 1%; // makes each item the right size
$menu-items-loop-offset: $menu-items - 1; // the number of items in the menu

@keyframes fadeIt {
	from  { background-color: #707070; }
	to { background-color: #0046A5; }
  }
// ======================================================
// Step 1 - Making a Fixed Width Navigation
// ======================================================

.nav-logo{
	flex-grow:1;
  display:flex;
  align-items:end;
}

.subnav {
  align-items:center;
}

.navback {
  background: #fff;
  display: block;
  float: left;
  margin: 0;
  padding: 0 1%;
  text-align: center;

  a {
    color: $background-color;
    display: block;
    font-weight: normal;
    padding-top: 20px;
    padding-bottom: 20px;
    text-decoration: none;

    &:hover {
      color: $indicator-color;
    }
  }
}
.nav-box-border {
	display: flex;
}
.PrimaryNav {
  @extend %cf; // clear the floats
  flex-grow:1;
  list-style: none;
  margin: auto;
  max-width: 720px; // As all measurements are using % this could be a flexible value.
  padding: 0;
  width: 100%;
}

.Nav-item {
  background: #fff;
  display: block;
  float: left;
  margin: 0;
  padding: 0;
  width: $width; //dynamic width
  text-align: center;

  // &:first-child {
  //   border-radius: 3px 0 0 3px;
  // }

  // &:last-child {
  //   border-radius: 0 3px 3px 0;
  // }

  &.is-active a {
	 color: $indicator-color;
  }

  a {
    color: $background-color;
    display: block;
    padding-top: 20px;
    padding-bottom: 20px;
    text-decoration: none;

    &:hover {
      color: #707090;
    }
  }
}


// ======================================================
// Step 2 - Making the pseudo indicator
// ======================================================

.with-indicator {
  position: relative;// the menu is "relative" to the absolute position last-child pseudo elements.
  z-index: 0;

  .Nav-item {
    // ======================================================
    // Step 2.1 - Making the indicator with the pseudo element.
    // ======================================================
    &:last-child {
      &:after {
        content: '';
        display: block;
        position: absolute;
        pointer-events: none;
        transition: all #{$transition-speed} ease;
      }

      // BEFORE IS THE TRIANGLE, AFTER IS THE BOX
      // Making the top CSS Triangle - learn more: https://css-tricks.com/animation-css-triangles-work/
      /*&:before {
        border: 6px solid transparent;
        border-top-color: $indicator-color;
        width: 0;
        height: 0;
        top: 0;
        left: ($width/2);
        margin-left: -3px;
      } */
      &:after {
        background: $background-color;
        top: 0px;
        bottom: -3px;
        left: 0;
        width: $width;
        z-index: -1;
      }


    }
  }



// ======================================================
// Step 3 - Making it move
// ======================================================

// this loop moves the starting point when we're not hovering
  @for $i from 1 through $menu-items-loop-offset {
    // when the Nav item "is active", make the indicator line up with the navigation item.
    // to translate this css a bit more: this selects "after" when "after" is a sibling of is-active.
    .Nav-item:nth-child(#{$i}).is-active ~ .Nav-item:last-child:after {
      left:($width*$i)-$width;
      background-color: $indicator-color;
    }
  }

  // this loop is active when we're hovering - overrides last one
  // This could be in the same loop as the above but for the tutorial steps it's not
  @for $i from 1 through $menu-items-loop-offset { 
    // We have to use !important to make the hovers overide if the last:child is the active or hovered
    .Nav-item.is-active:nth-child(#{$i}):hover ~ .Nav-item:last-child:after {
      left:($width*$i)-$width !important;
      background-color: $indicator-color !important;
    }
    .Nav-item:not(.is-active):nth-child(#{$i}):hover ~ .Nav-item:last-child:after {
      left:($width*$i)-$width !important;
      background-color: $background-color !important;
    }    
  }
    
  // this could be nested in the original .Nav-item
  .Nav-item {
      &:last-child {
        // make sure the last-child talks to itself
        &:hover {
            &:not(.is-active)  {
              &:after{
                left: 100%-$width !important;
                background-color: $background-color !important;
              }
            }
        }
        &.is-active {
          &:after{
            left: 100%-$width;
            background-color: $indicator-color !important;
          }
        }
      }
  }

}


// ======================================================
// The usual Global resets
// ======================================================

*, *:after {
  box-sizing: border-box; // learn more: https://css-tricks.com/box-sizing/
}

// Extending the https://css-tricks.com/micro-clearfix/
%cf:after {
    content: " ";
    display: table;
}
%cf:after {
    clear: both;
}

// Presentation Styling

html {

  font-family: 'Fira Code', sans-serif;
  font-weight: 400;
}

.toggle {
    color: #fff;
    font-family: sans-serif;
    text-align: center;
}
